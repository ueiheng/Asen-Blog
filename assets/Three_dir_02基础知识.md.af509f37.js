import{S as D,P as A,W as F,B as _,M as m,a as w,A as v}from"./chunks/three.module.50b37e64.js";import{r as h,o as g,a as c,c as i,b as y,d as u}from"./app.b29f61af.js";import{O as f}from"./chunks/OrbitControls.df197344.js";const x={__name:"02基础知识场景和相机渲染器",setup(C){const a=new D,e=new A(75,window.innerWidth/window.innerHeight,.1,1e3),n=h(null),s=new F;function l(){s.render(a,e)}return g(()=>{console.log(n),s.setSize(window.innerWidth/2.2,window.innerHeight/2.2),n.value.appendChild(s.domElement),l()}),(o,p)=>(c(),i("div",{ref_key:"myCanvas",ref:n,style:{width:"682px",height:"335px","border-radius":"8px",overflow:"hidden"}},null,512))}},T={__name:"02基础知识添加物体",setup(C){const a=new D,e=new A(75,window.innerWidth/window.innerHeight,.1,1e3),n=h(null),s=new F,l=new _(1,1,1),o=new m({color:16776960}),p=new w(l,o);a.add(p),e.position.z=5;function t(){s.render(a,e)}return g(()=>{console.log(n),s.setSize(window.innerWidth/2.2,window.innerHeight/2.2),n.value.appendChild(s.domElement),t()}),(r,d)=>(c(),i("div",{ref_key:"myCanvas",ref:n,style:{width:"682px",height:"335px","border-radius":"8px",overflow:"hidden"}},null,512))}},E={__name:"02轨道控制器",setup(C){const a=new D,e=new A(75,window.innerWidth/window.innerHeight,.1,1e3),n=h(null),s=new F,l=new _(1,1,1),o=new m({color:16776960}),p=new w(l,o);a.add(p),e.position.z=5;const t=new f(e,s.domElement);function r(){requestAnimationFrame(r),t.update(),s.render(a,e)}return g(()=>{console.log(n),s.setSize(window.innerWidth/2.2,window.innerHeight/2.2),n.value.appendChild(s.domElement),r()}),(d,b)=>(c(),i("div",{ref_key:"myCanvas",ref:n,style:{width:"682px",height:"335px","border-radius":"8px",overflow:"hidden"}},null,512))}},j={__name:"02美化立方体",setup(C){const a=new D,e=new A(75,window.innerWidth/window.innerHeight,.1,1e3),n=h(null),s=new F,l=new _(1,1,1),o=new m({color:16776960}),p=new w(l,o);a.add(p),e.position.z=5;const t=new f(e,s.domElement),r=new v(4);a.add(r),t.enableDamping=!0;function d(){requestAnimationFrame(d),t.update(),s.render(a,e)}return g(()=>{console.log(n),s.setSize(window.innerWidth/2.2,window.innerHeight/2.2),n.value.appendChild(s.domElement),d()}),(b,P)=>(c(),i("div",{ref_key:"myCanvas",ref:n,style:{width:"682px",height:"335px","border-radius":"8px",overflow:"hidden"}},null,512))}},R=u(`<h1 id="详解three-js实现立方体的开发步骤" tabindex="-1">详解Three.js实现立方体的开发步骤 <a class="header-anchor" href="#详解three-js实现立方体的开发步骤" aria-hidden="true">#</a></h1><h2 id="第一步-将安装后的three进行引入" tabindex="-1">第一步：将安装后的three进行引入 <a class="header-anchor" href="#第一步-将安装后的three进行引入" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> THREE </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">three</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="第二步-布置场景" tabindex="-1">第二步：布置场景 <a class="header-anchor" href="#第二步-布置场景" aria-hidden="true">#</a></h2><p><strong>场景作用：</strong></p><ol><li><p>容器：场景是所有三维对象的容器，我们可以将需要显示的所有物体添加到场景中，然后交给three.js引擎进行渲染。</p></li><li><p>管理：场景管理着所有与场景有关的组件，如相机、灯光等。我们可以通过场景来添加这些组件，也可以从场景中删除这些组件。</p></li><li><p>事件：场景也可以处理用户事件，比如鼠标点击、键盘按键等。我们可以在场景中添加对应的事件监听器来处理用户的输入。</p></li><li><p>处理动画：场景可以用于处理动画效果，我们可以将需要动画的物体添加到场景中，然后利用渲染循环不断更新物体的状态，实现动画效果。</p></li></ol><br><br><ul><li>场景是所有三位对象的容器，是整个渲染器的核心部分。必不可少！</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> scene </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Scene</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="第三步-搭建相机" tabindex="-1">第三步：搭建相机 <a class="header-anchor" href="#第三步-搭建相机" aria-hidden="true">#</a></h2><p><strong>常见相机种类：</strong></p><ol><li><p><strong>透视相机</strong>(PerspectiveCamera)：透视相机是最常用的相机类型之一，它根据透视原理来投影场景。远离相机的物体会显得比较小，近处的物体则会显得比较大，这种效果比较符合人眼的视觉感受，因此透视相机通常用于需要展示深度感的场景中。</p></li><li><p><strong>正交相机</strong>(OrthographicCamera)：正交相机则是以正交投影方式来渲染场景，不会对距离产生影响，所有物体的大小比例是固定不变的。通常用于需要精确测量物体大小、制作二维类似地图、设计平面布局等场景。</p></li><li><p><strong>立方体相机</strong>(CubeCamera)：立方体相机以六个面为摄像头进行拍摄，可以将一个物体的各个角度完整地呈现出来。常常用于渲染环境贴图、制作反射、折射效果等。</p></li><li><p><strong>VR相机</strong>(VRControls)：VR相机用于在虚拟现实中进行场景渲染，它可以让用户沉浸在三维场景中，实现360度全方位视角的交互体验。</p></li></ol><br><br><ul><li>相机决定了场景中物体的<strong>观察方式</strong>，定义了渲染器如何将场景中的三位物体投影到屏幕上。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> camera </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">PerspectiveCamera</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">75</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerWidth </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerHeight</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#F78C6C;">0.1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#F78C6C;">1000</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>这段代码 给PerspectiveCamera相机传递了四个参数</p><ol><li>第一个参数75表示摄像机的<strong>可视角度</strong>，用角度表示。这个值越大，场景中的物体看起来就越小</li><li>第二个参数window.innerWidth / window.innerHeight表示视窗的<strong>宽高比</strong>。在这个例子中，我们使用了浏览器窗口的宽高比作为相机视野的宽高比，保证场景不会被拉伸或压缩。</li><li>第三第四参数为<strong>近截面</strong>和<strong>远截面</strong>，当物体某些部分比摄像机的远截面远或者比近截面近的时候，该这些部分将不会被渲染到场景中。</li></ol><p><strong>特别注意：此时我们创建的相机位于原点！原点！原点！</strong></p><h2 id="第四步-创建渲染器实例" tabindex="-1">第四步：创建渲染器实例 <a class="header-anchor" href="#第四步-创建渲染器实例" aria-hidden="true">#</a></h2><ul><li><p>在Three.js中，渲染器（Renderer）是将场景中的物体、光源等元素转换成最终图像的核心组件之一。它的作用是通过计算光线、投影等数学运算，将三维场景渲染出来并显示在屏幕上。</p></li><li><p>在Three.js中，提供了多个渲染器，包括<strong>WebGLRenderer</strong>、CanvasRenderer、SVGRenderer等，其中最常用的是<strong>WebGLRenderer</strong>。</p></li><li><p><strong>WebGLRenderer</strong>使用WebGL技术来完成渲染工作，能够利用GPU硬件加速，因此它的渲染效率比较高。同时，WebGLRenderer还支持多种功能，如阴影、天空盒、后期处理等。</p></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">cosnt renderer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">webGLRenderer</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">renderer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">render</span><span style="color:#A6ACCD;">(scene</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">camera) </span></span>
<span class="line"></span></code></pre></div><p>注意：此时我们已经将创建好的场景和相机进行了渲染，但并未添加物体</p><p><strong>即此时的场景如下：</strong></p><p>全黑！</p>`,26),S=u(`<h2 id="第五步-创建物体" tabindex="-1">第五步：创建物体 <a class="header-anchor" href="#第五步-创建物体" aria-hidden="true">#</a></h2><ul><li>本篇以正反体为例，向场景中添加正方体</li></ul><p><strong>这段代码实现了将一个黄色的立方体对象添加到场景中，并将相机位置设置为z轴为5的位置。</strong></p><ol><li><p>创建一个立方体的几何体(<strong>BoxGeometry</strong>)。这个几何体的参数为1,1,1,表示<strong>宽、高、深度</strong>均为1个单位长度。</p></li><li><p>创建一个材质(<strong>MeshBasicMaterial</strong>)，并将其颜色设置为黄色(0xffff00)。这个材质是Three.js中最基本的材质之一，没有任何光照影响。</p></li><li><p>创建一个网格对象(<strong>Mesh</strong>)，将立方体几何体和黄色材质对象作为参数，生成一个黄色的立方体物体。然后将该物体添加到场景(scene)中。</p></li><li><p>将相机位置至于z轴5个单位，此时<strong>相机在场景之外</strong>，才可以看到创建后的物体，否则在<strong>原点于物体重合</strong>！</p></li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> geometry </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">BoxGeometry</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> material </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">MeshBasicMaterial</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">color</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">0xffff00</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> cube </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Mesh</span><span style="color:#A6ACCD;">(geometry</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">material)</span></span>
<span class="line"><span style="color:#A6ACCD;">scene</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(cube)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">camera</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">position</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">z </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>效果图如下：</p>`,6),k=u(`<h2 id="第六步-创建一个轨道控制器" tabindex="-1">第六步：创建一个轨道控制器 <a class="header-anchor" href="#第六步-创建一个轨道控制器" aria-hidden="true">#</a></h2><ul><li>通过创建轨道控制器，可以让我们波动这个正方体</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">OrbitControls</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">three/addons/controls/OrbitControls.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> controls </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">OrbitControls</span><span style="color:#A6ACCD;">( camera</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> renderer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">domElement )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>效果图如下：</p><p>此时使用鼠标拖动或者滚轮滚动都可以对立方体进行波动</p>`,5),H=u(`<h2 id="第七步-美化立方体" tabindex="-1">第七步：美化立方体 <a class="header-anchor" href="#第七步-美化立方体" aria-hidden="true">#</a></h2><ul><li>添加坐标轴</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> axes </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AxesHelper</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">scene</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(axes)</span></span>
<span class="line"></span></code></pre></div><ul><li>施加波动的惯性作用</li></ul><p><strong>.enableDamping : Boolean</strong> 将其设置为true以启用阻尼（惯性），这将给控制器带来重量感。默认值为false。 请注意，如果该值被启用，你将必须在你的动画循环里调用.update()。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">controls</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">enableDamping </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"></span></code></pre></div>`,6),z=JSON.parse('{"title":"详解Three.js实现立方体的开发步骤","description":"","frontmatter":{},"headers":[{"level":2,"title":"第一步：将安装后的three进行引入","slug":"第一步-将安装后的three进行引入","link":"#第一步-将安装后的three进行引入","children":[]},{"level":2,"title":"第二步：布置场景","slug":"第二步-布置场景","link":"#第二步-布置场景","children":[]},{"level":2,"title":"第三步：搭建相机","slug":"第三步-搭建相机","link":"#第三步-搭建相机","children":[]},{"level":2,"title":"第四步：创建渲染器实例","slug":"第四步-创建渲染器实例","link":"#第四步-创建渲染器实例","children":[]},{"level":2,"title":"第五步：创建物体","slug":"第五步-创建物体","link":"#第五步-创建物体","children":[]},{"level":2,"title":"第六步：创建一个轨道控制器","slug":"第六步-创建一个轨道控制器","link":"#第六步-创建一个轨道控制器","children":[]},{"level":2,"title":"第七步：美化立方体","slug":"第七步-美化立方体","link":"#第七步-美化立方体","children":[]}],"relativePath":"Three_dir/02基础知识.md","lastUpdated":null}'),W={name:"Three_dir/02基础知识.md"},B=Object.assign(W,{setup(C){return(a,e)=>(c(),i("div",null,[R,y(x),S,y(T),k,y(E),H,y(j)]))}});export{z as __pageData,B as default};
